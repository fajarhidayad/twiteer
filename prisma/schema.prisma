// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  username      String?      @unique
  bio           String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  tweets        Tweet[]
  likes         Like[]
  comments      Comment[]
  retweets      Retweet[]
  bookmarks     Bookmark[]
  followers     UserFollow[] @relation("follower")
  followings    UserFollow[] @relation("following")
}

model UserFollow {
  id          Int      @id @default(autoincrement())
  follower    User     @relation(name: "follower", fields: [followerId], references: [id])
  followerId  String
  following   User     @relation(name: "following", fields: [followingId], references: [id])
  followingId String
  createdAt   DateTime @default(now())
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Tweet {
  id        Int      @id @default(autoincrement())
  content   String   @db.VarChar(255)
  createdAt DateTime @default(now())

  authorId String
  likes    Like[]
  comments Comment[]
  retweets Retweet[]
  bookmark Bookmark[]
  author   User       @relation(fields: [authorId], references: [id])
}

model Retweet {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  user    User   @relation(fields: [userId], references: [id])
  userId  String
  tweet   Tweet  @relation(fields: [tweetId], references: [id])
  tweetId Int
}

model Like {
  id        Int      @id @default(autoincrement())
  userId    String
  tweetId   Int
  createdAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id])
  tweet Tweet @relation(fields: [tweetId], references: [id])
}

model Comment {
  id           Int      @id @default(autoincrement())
  comment_text String
  createdAt    DateTime @default(now())
  tweetId      Int
  userId       String

  tweet Tweet @relation(fields: [tweetId], references: [id])
  auth  User  @relation(fields: [userId], references: [id])
}

model Bookmark {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  userId  String
  user    User   @relation(fields: [userId], references: [id])
  tweetId Int
  tweet   Tweet  @relation(fields: [tweetId], references: [id])
}
